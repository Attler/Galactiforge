Vision: 
  Space shooter with on-ship factories, weapons, thrusters and shields don't have stats, their performance is governed by your factory efficiency.

Active Goal: 
- Complete a playable alpha that includes AI, ship factories, weapons and thrusters, ship building, menus and sound that is ready for  
    upload to Kickstarter etc in order to raise $10K AUD by the end of November 2019.

Committed mechanics:
- Ships with grids and factories - Implemented
- Procedural resource management - Implemented
- Click to place factories/weapons etc - Basic implementation
- Thruster fuel production and variety - Basic implementation
- Weapons and ammo variety - Basic implementation cannons only
- Grid heat - Basic implementation for cannons only
- Conveyors and pipelines
- Enemy agro and seek AI - Basic implementation
- Radar

Ideas:
-  Physical ammo stats are created by the factories that produce them. i.e. shells can be packed with more powder or different explosives.
-  Energy weapon stats are created by the power systems that supply them. i.e. lasers can be cooled by water, cryoliquid etc,
    pumping pressures can be increased, energy storage and supply can be more advanced.
-  Thrusters can be cooled by water, cryoliquid to make them faster. Fuel and coolant pumping pressure can ramp up. 
-  Active grids heat up: 
-  Cannons - Fire rate is slowed. --Implemented in a basic form.
-  Lasers - Range and damage reduced.
-  Thrusters - Thrust is reduced.
-  Optimisation - AI targetting, look for grid master in range first and then look through the sub-grid. 

Gameplay:
- Your ship is like a mini RTS / Factorio clone.
- Ships are strong and don't go down easy.
- There must be at least one ship core otherwise big kaboom!!.

Galactiforge story
- ???

IMPROVEMENT
Grid component structure defined in configs.

"COMPONENTS": {

  "ResourceStorage": {
    "definition": "Provides storage of resources within the grid",
    "requires": nil,
    "accepted_resources": ["list"] or "all,
    "quantity": number or 1
  },

  "ResourceProcessor": {
    "definition": "Converts resources from one type to another"
    "requires": ["ResourceStorage"],
    "processed_resources" : {
      "option1": {
        "inputs" : [
          "resource_name1": {"consume_count": number or 1},
          "resource_name2": {"consume_count": number or 1}...
        ],
        "outputs" :[
          "resource_name1": {"produce_count": number or 1},
          "resource_name2": {"produce_count": number or 1}...
        ]
          "production_rate": number or 1
      },
      "option2..."
    }
  },

  "ResourceConsumer": {
    "definition": "Uses up the given resource",
    "requires": ["ResourceStorage"],
    "required_resources":[
      "resource_name1": {"consume_count": number or 1},
      "resource_name2": {"consume_count": number or 1}...
    ]
  },

  "ResourceTransfer": {
    "definition": "Transfers resources",
    "requires": ["ResourceStorage"],
    "transfer_rate": number or nil --nil will process at the game update speed
  }

  "GridStaticArt": {

  },
  "GridAnimatedArt": {

  },
  "GridPhysics": {

  },
  "Health": {

  }
}


